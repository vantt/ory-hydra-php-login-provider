<?php


namespace App\OAuthClient;


use App\OAuthClient\HydraResourceOwner;
use League\OAuth2\Client\Provider\AbstractProvider;
use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
use League\OAuth2\Client\Token\AccessToken;
use League\OAuth2\Client\Tool\BearerAuthorizationTrait;
use Psr\Http\Message\ResponseInterface;

class OryHydraProvider extends AbstractProvider {
    use BearerAuthorizationTrait;

    /**
     * @var bool
     */
    protected $isPKCE;

    protected $baseUrl;

    /**
     * @var
     */
    protected $code_verifier;

    public function getBaseUrl() {
        return $this->baseUrl;
    }

    /**
     * @return bool
     */
    public function isPKCE(): bool {
        return (bool)$this->isPKCE;
    }

    /**
     * @return mixed
     */
    public function getCodeVerifier() {
        if ($this->code_verifier) {
            return $this->code_verifier;
        }

        return $this->code_verifier = $this->getRandomState();
    }

    /**
     * @param array $options
     *        https://auth0.com/docs/api-auth/tutorials/authorization-code-grant-pkce
     *
     * @return string
     */
    public function getAuthorizationUrl(array $options = []) {
        return parent::getAuthorizationUrl($options); // TODO: Change the autogenerated stub
    }

    /**
     * Get provider url to run authorization
     *
     * @return string
     */
    public function getBaseAuthorizationUrl() {
        return $this->getBaseUrl() . '/oauth2/auth';
    }

    /**
     * Returns the base URL for requesting an access token.
     *
     * @param array $params
     *
     * @return string
     */
    public function getBaseAccessTokenUrl(array $params) {
        return $this->getBaseUrl() . '/oauth2/token';
    }

    /**
     * Get provider url to fetch user details
     *
     * @param AccessToken $token
     *
     * @return string
     */
    public function getResourceOwnerDetailsUrl(AccessToken $token) {
        return $this->getBaseUrl() . '/userinfo';
    }

    /**
     * Get the default scopes used by this provider.
     *
     * @return array
     */
    protected function getDefaultScopes() {
        return ['openid', 'offline'];
    }

    /**
     * Returns the string that should be used to separate scopes when building
     * the URL for requesting an access token.
     *
     * @return string Scope separator, defaults to ' '
     */
    protected function getScopeSeparator() {
        return ' ';
    }

    /**
     * Check a provider response for errors.
     *
     * @param ResponseInterface $response
     * @param array|string      $data
     *
     * @throws IdentityProviderException
     */
    protected function checkResponse(ResponseInterface $response, $data) {
        if ($response->getStatusCode() >= 400) {
            throw new IdentityProviderException(
              $data['error'] ?: $response->getReasonPhrase(),
              $response->getStatusCode(),
              $response
            );
        }
    }

    /**
     * Generate a user object from a successful user details request.
     *
     * @param array       $response
     * @param AccessToken $token
     *
     * @return HydraResourceOwner
     */
    protected function createResourceOwner(array $response, AccessToken $token) {
        return new HydraResourceOwner($response);
    }
}